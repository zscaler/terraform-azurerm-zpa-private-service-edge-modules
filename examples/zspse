#!/usr/bin/env bash

set -eo pipefail

### SET COLOR CODES ###
RED=$(tput setaf 1)
GREEN=$(tput setaf 2)
YELLOW=$(tput setaf 3)
CYAN=$(tput setaf 6)
RESET=$(tput sgr0)

usage()
{
    echo "Usage: $0 <up|destroy>"
    exit 1
}

if [ $# -ne 1 ] ; then
    usage
else
    case $1 in
      up|destroy|do)
          oper=$1
      ;;
      *)
          usage
      ;;
    esac
fi

if [[ "$oper" == "up" ]]; then
    PS3="${CYAN}Select desired deployment: ${RESET}"
    deployments=("greenfield - Recommended for isolated test/POV deployments. Creates new network infrastructure, and a public jump host" "brownfield - Recommended for prod deployments. Bring-your-own existing network infrastructure customizations + no bastion creation")
    select deployment in "${deployments[@]}"
    do
        case $REPLY in
            1)
                echo "Greenfield deployment selected..."
                echo "${YELLOW}**Caution** These deployments include a publicly accessible jump host and are intended primarily for lab/test environments${RESET}"
                echo ""
                deployment=greenfield
            break
            ;;
            2)
                echo "Brownfield deployment selected..."
                deployment=brownfield
            break
            ;;
            *) 
                echo "${RED}Invalid response. Please enter a number selection${RESET}"
        esac
    done
fi

if [[ "$deployment" == "greenfield" ]]; then
    PS3="${CYAN}Select desired deployment type: ${RESET}"
    dtypes=(
        "Deploy one or more Private Service Edges in a new Resource Group and VNet"
        "Deploy a new Resource Group and VNet only - No Zscaler PSE resources"  
    )
    select greenfield_type in "${dtypes[@]}"
    do
        case $REPLY in
            1)
                echo "Deployment type base_pse selected..."
                dtype=base_pse
                break
                ;;
            2)
                echo "Deployment type base selected..."
                dtype=base
                break
                ;;
            *) 
                echo "${RED}Invalid response. Please enter a number selection${RESET}"
        esac
    done
elif [[ "$deployment" == "brownfield" ]]; then
    PS3="${CYAN}Select desired deployment type: ${RESET}"
    dtypes=(
        "Deploy multiple Private Service Edges in a new or existing Resource Group and VNet"
    )
    select brownfield_type in "${dtypes[@]}"
    do
        case $REPLY in
            1)
                echo "Deployment type pse selected..."
                dtype=pse
                break
                ;;
            *) 
                echo "${RED}Invalid response. Please enter a number selection${RESET}"
        esac
    done
else
    dtype=$dtype
fi

echo "Discovering processor architecture..."
archdetect=$(uname -m)

tversion=1.1.9
echo "Detecting OS..."
if [[ "$OSTYPE" == "linux"* ]]; then
    os_str=linux
    arch=amd64
    ostype=Linux
elif [[ "$OSTYPE" == "darwin"* && $archdetect == "arm64" ]]; then
    os_str=darwin
    arch=arm64
    ostype=MacOS_arm64
elif [[ "$OSTYPE" == "darwin"* ]]; then
    os_str=darwin
    arch=amd64
    ostype=MacOS
elif [[ "$OSTYPE" == "freebsd"* ]]; then
    os_str=freebsd
    arch=amd64
    ostype=FreeBSD
    echo "FreeBSD support coming soon..."
    exit 1
else
    echo "${RED}Unsupported OS: $OSTYPE${RESET}"
    exit 1
fi
echo "${GREEN}OS is $ostype${RESET}"

dir=bin
echo "Creating a local $dir directory if not present..."
if [[ ! -e $dir ]]; then
    mkdir $dir
elif [[ ! -d $dir ]]; then
    echo "${RED}$dir already exists but is not a directory${RESET}" 1>&2
    exit 1
fi

echo "Checking Azure Environment Variables and Private Service Edge bootstrap requirements... For custom/byo deployments, please stop and refer to the README and terraform.tfvars file instructions"
if [[ "$oper" == "up" && ! -e ./.zspserc ]]; then
first_run="yes"

    # Azure Region selection
    PS3="${CYAN}Select desired Azure region: ${RESET}"
    region_list=(
	"australiacentral"
	"australiacentral2"
	"australiaeast"
	"australiasoutheast"
	"brazilsouth"
	"brazilsoutheast"
	"canadacentral"
	"canadaeast"
	"centralindia"
	"centralus"
	"centraluseuap"
	#"chinaeast"
	#"chinaeast2"
    #"chinaeast3"
	#"chinanorth"
	#"chinanorth2"
	#"chinanorth3"
	"eastasia"
	"eastus"
	"eastus2"
	"eastus2euap"
	"francecentral"
	"francesouth"
	"germanynorth"
	"germanywestcentral"
	"japaneast"
	"japanwest"
	"koreacentral"
	"koreasouth"
	"northcentralus"
	"northeurope"
	"norwayeast"
	"norwaywest"
	"southafricanorth"
	"southafricawest"
	"southcentralus"
	"southeastasia"
	"southindia"
	"swedencentral"
	"swedensouth"
	"switzerlandnorth"
	"switzerlandwest"
	"uaecentral"
	"uaenorth"
	"uksouth"
	"ukwest"
	"usdodcentral"
	"usdodeast"
	"usgovarizona"
	"usgovtexas"
	"usgovvirginia"
	"usseceast"
	"ussecwest"
	"ussecwestcentral"
	"westcentralus"
	"westeurope"
	"westindia"
	"westus"
	"westus2"
	"westus3"
        )
        select region_selection in "${region_list[@]}"; do
            for region_choice in "${region_list[@]}"; do
                if [[ $region_choice == $region_selection ]]; then
                    azure_location=$region_selection
                    echo "Azure region ${GREEN}$azure_location${RESET} selected..."
                    echo "export TF_VAR_arm_location='$azure_location'" > .zspserc
		    if [[ ${azure_location} = "china"*  ]]; then
            		echo "${YELLOW}Azure China region detected. Setting ARM_ENVIRONMENT...${RESET}"
            		echo "export ARM_ENVIRONMENT=china" >> .zspserc
            		echo "export ARM_SKIP_PROVIDER_REGISTRATION=true" >> .zspserc
        	   elif [[ ${azure_location} = "usgov"* || ${azure_location} = "ussec"* || ${azure_location} = "usdod"* ]]; then
            		echo "${YELLOW} US Gov region detected. Setting ARM_ENVIRONMENT...${RESET}"
           	        echo "export ARM_ENVIRONMENT=usgovernment" >> .zspserc
            		echo "export ARM_SKIP_PROVIDER_REGISTRATION=true" >> .zspserc
        	   fi
                   break 2
                fi
            done
        done

    echo "Checking Azure Environment Variables..."
    read -r -p "${CYAN}Enter Azure Subcription ID: ${RESET}" azure_subscription_id
    echo "export ARM_SUBSCRIPTION_ID=${azure_subscription_id}" >> .zspserc
    echo "export TF_VAR_env_subscription_id=${azure_subscription_id}" >> .zspserc
    read -r -p "${CYAN}Enter Directory (tenant) ID: ${RESET}" azure_tenant_id
    echo "export ARM_TENANT_ID=${azure_tenant_id}" >> .zspserc
    read -r -p "${CYAN}Enter Application (client) ID of Service Principal: ${RESET}" azure_client_id
    echo "export ARM_CLIENT_ID=${azure_client_id}" >> .zspserc
    read -r -p "${CYAN}Enter Client Secret Value of Service Principal: ${RESET}" azure_client_secret
    echo "export ARM_CLIENT_SECRET='${azure_client_secret}'" >> .zspserc

    if [[ "$deployment" == "greenfield" ]]; then    
        while true; do
            clientpublicip=$(curl -s ifconfig.me)
            echo "greenfield deployments include a publicly accessible ssh bastion host.."
            read -r -p "${CYAN}Your current public IP is ${clientpublicip}. Restrict SSH access to only this IP address? [yes/no]: ${RESET}" bastion_response
            case $bastion_response in 
            yes|y ) 
                echo "Updating Bastion NSG to permit SSH only from ${clientpublicip}: "
                echo "export TF_VAR_bastion_nsg_source_prefix=${clientpublicip}" >> .zspserc
                useclientip=true
            break
            ;;
            no|n )
                useclientip=false
            break
            ;;
            * ) echo "${RED}Invalid response. Please enter yes or no${RESET}";;
            esac
        done

        if [[ "$useclientip" == "false" ]]; then
            while true; do
                read -r -p "${CYAN}Lock SSH access to a different IP address or range? Default is open [yes/no]: ${RESET}" changebastionip
                case $changebastionip in 
	            yes|y ) 
                    read -r -p "${CYAN}Enter new IP Address or CIDR range (e.g. 2.2.2.2/32): ${RESET}" bastionipinput
                    echo "export TF_VAR_bastion_nsg_source_prefix=${bastionipinput}" >> .zspserc

                    if [[ $bastionipinput =~ ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(3[0-2]|[1-2][0-9]|[1-9]))$ ]]
                    then
                        echo "$bastionipinput - IP/Netmask valid"
                    else
                        echo "${RED}$bastionipinput is not valid IP CIDR format${RESET}"
                        echo "${YELLOW}Delete .zspserc file and re-run zsec up...${RESET}"
                        exit 1
                    fi
                break
                ;;
	            no|n )
                    echo "${YELLOW}**Caution** SSH access permitted for all IP addresses...${RESET}" 
                break
                ;;
	            * ) echo "${RED}invalid response. Please enter yes or no${RESET}";;
                esac
            done
        fi
    fi

    # if .zspserc is not present we'll assume that Azure env was never set
    if [[ "$dtype" != "base" ]]; then
        # ---
        # Host Encryption Support
        encryption_at_host_enabled=true
        # Sourcing .zspserc to use credentials during execution
        source .zspserc
        if grep -q "export ARM_ENVIRONMENT=china" .zspserc; then
        TOKEN_ENDPOINT="https://login.partner.microsoftonline.cn/${ARM_TENANT_ID}/oauth2/token"
        RESOURCE="https://management.chinacloudapi.cn"
        elif grep -q "export ARM_ENVIRONMENT=usgovernment" .zspserc; then
        TOKEN_ENDPOINT="https://login.microsoftonline.us/${ARM_TENANT_ID}/oauth2/token"
        RESOURCE="https://management.usgovcloudapi.net"
        else
        TOKEN_ENDPOINT="https://login.microsoftonline.com/${ARM_TENANT_ID}/oauth2/token"
        RESOURCE="https://management.azure.com/"
        fi

        while true; do
            read -r -p "${CYAN}Do you want to enable the Azure host encryption feature? [Default setting is Yes]: ${RESET}" input

            # Convert the user input to lowercase for case-insensitive comparison
            input=$(echo "$input" | tr '[:upper:]' '[:lower:]')

            if [[ "$input" == "no" || "$input" == "n" ]]; then
                echo "${YELLOW}**Caution** Setting encryption_at_host_enabled to false...${RESET}"
                encryption_at_host_enabled=false
                break
            elif [[ "$input" == "yes" || "$input" == "y" || -z "$input" ]]; then            
                echo "Checking if EncryptionAtHost feature is enabled for subscription $ARM_SUBSCRIPTION_ID..."
                ACCESS_TOKEN=$(curl -s -X POST -H "Content-Type: application/x-www-form-urlencoded" \
                    -d "grant_type=client_credentials" \
                    -d "client_id=${ARM_CLIENT_ID}" \
                    -d "client_secret=${ARM_CLIENT_SECRET}" \
                    -d "resource=${RESOURCE}" \
                    "${TOKEN_ENDPOINT}" | grep -o '"access_token":"[^"]*' | awk -F'"' '{print $4}')
                    
                response=$(curl -s -X GET -H "Authorization: Bearer ${ACCESS_TOKEN}" \
                    "$RESOURCE/subscriptions/$ARM_SUBSCRIPTION_ID/providers/Microsoft.Features/providers/Microsoft.Compute/features/EncryptionAtHost?api-version=2021-07-01" \
                    |grep -o '"state":"[^"]*' | awk -F'"' '{print $4}')

                if [ "$response" = "Registered" ]; then
                    echo "Setting encryption_at_host_enabled to true..."
                    encryption_at_host_enabled=true
                else
                    echo "${RED}Error: Azure Subscription $ARM_SUBSCRIPTION_ID is not registered to support host encryption. Please refer to documentation.${RESET}"
                    exit 1    
                fi
                break
            else
                echo "${RED}Invalid input. Please enter 'yes' or 'no'.${RESET}"
            fi
        done

        echo "export TF_VAR_encryption_at_host_enabled=${encryption_at_host_enabled}" >> .zspserc
        # End of Host Encryption support update
        # ---

        while true; do
            read -r -p "${CYAN}Enter ZPA Client ID: ${RESET}" zpa_client_id
            echo "export ZPA_CLIENT_ID=\"${zpa_client_id}\"" >> .zspserc
            read -r -p "${CYAN}Enter ZPA Client Secret: ${RESET}" zpa_client_secret
            echo "export ZPA_CLIENT_SECRET=\"${zpa_client_secret}\"" >> .zspserc
            read -r -p "${CYAN}Enter ZPA Customer ID: ${RESET}" zpa_customer_id
            echo "export ZPA_CUSTOMER_ID=\"${zpa_customer_id}\"" >> .zspserc

            read -r -p "${CYAN}Do you already have a Service Edge provisioning key to use? [yes/no] ${RESET}" prov_key_response
            case $prov_key_response in
                yes|y )
                read -r -p "${CYAN}Enter the name of your existing Service Edge provisioning key: ${RESET}" byo_provisioning_key_name
                echo "export TF_VAR_byo_provisioning_key=true" >> .zspserc
                echo "export TF_VAR_byo_provisioning_key_name=${byo_provisioning_key_name}" >> .zspserc
                break
                ;;
                no|n )
                echo "${GREEN}Terraform will be creating a new Service Edge Group and provisioning key${RESET}"
                echo "${YELLOW}Before proceeding, make sure you have entered all variable requirements from steps 1 and 2 in $dtype/terraform.tfvars${RESET}"
                break
                ;;
                * ) echo "${RED}Invalid response. Please enter yes or no${RESET}";;
            esac
        done

        PS3="${CYAN}Select desired Azure VM type for Private Service Edge: ${RESET}"
        vm_sizes=("Standard_D4s_v3" "Standard_F4s_v2")
        select psevm_instance_type in "${vm_sizes[@]}"
        do
            case $REPLY in
                1)
                echo "Private Service Edge VM type $psevm_instance_type selected"
                echo "export TF_VAR_psevm_instance_type='$psevm_instance_type'" >> .zspserc
                break
                ;;
                2)
                echo "Private Service Edge VM type $psevm_instance_type selected"
                echo "export TF_VAR_psevm_instance_type='$psevm_instance_type'" >> .zspserc
                break
                ;;
                *) 
                echo "${RED}Invalid response. Please enter a number selection${RESET}"
            esac
        done 

        pse_count_default=2
        read -r -p "${CYAN}Enter how many Private Service Edges to deploy? [Default=$pse_count_default]: ${RESET}" pse_count_input
        pse_count=${pse_count_input:-$pse_count_default}
        if ((pse_count >= 1 && pse_count <= 20)); then
            echo "Terraform will deploy ${GREEN}${pse_count} Private Service Edges${RESET} in ${azure_location}"
            echo "export TF_VAR_pse_count=${pse_count}" >> .zspserc
        else
            echo "${RED}Invalid pse_count value. Must be a number between 1 and 20${RESET}"
            echo "${YELLOW}Delete .zspserc file and re-run zsec up...${RESET}"
            exit 1
        fi

        az_supported_regions=["australiaeast","brazilsouth","canadacentral","centralindia","centralus","chinanorth3","eastasia","eastus","eastus2","francecentral","germanywestcentral","japaneast","koreacentral","northeurope","norwayeast","southafricanorth","southcentralus","southeastasia","swedencentral","switzerlandnorth","uaenorth","uksouth","westeurope","westus2","westus3"]
        if [[ ${az_supported_regions[*]} =~ $azure_location ]]; then
            echo "${GREEN}Azure region ${azure_location} supports Zones deployment...${RESET}"
            zones_enabled_default=no
            while true; do
                read -r -p "${CYAN}Deploy Private Service Edges in dedicated Availability Zones/subnets? (Enter yes or no) [Default=$zones_enabled_default]: ${RESET}" zones_enabled_input
                zones_enabled=${zones_enabled_input:-$zones_enabled_default}
                case $zones_enabled in 
                yes|y )
                    echo "export TF_VAR_zones_enabled=true" >> .zspserc
                    zones_enabled=true
                break
                ;;
                no|n )
                    echo "export TF_VAR_zones_enabled=false" >> .zspserc
                    echo "${YELLOW}**Caution** No zones defined. Proceeding with availability sets fault tolerance...${RESET}"
                    break
                ;;
                * ) echo "${RED}Invalid response. Please enter yes or no${RESET}";;
                esac
            done  
        else
            echo "${YELLOW}Azure region ${azure_location} does not support Zones. Proceeding...${RESET}"
        fi
        
        # Azure number of Availability Zones selection
        if [[ "$zones_enabled" == "true" ]]; then
                PS3="${CYAN}Select how many Availability Zone subnets to deploy across: ${RESET}"
                zones_list=(
                    "1 availability zone"
                    "2 availability zones"
                    "3 availability zones"
                    )
                select zone_selection in "${zones_list[@]}"
                do
                    case $REPLY in
                    1 )
                        echo "One Availability Zone selected..."
                        zones_count=1
                    break
                    ;;
                    2 )
                        echo "Two Availability Zones selected..."
                        zones_count=2
                    break
                    ;;
                    3 )
                        echo "Three Availability Zones selected..."
                        zones_count=3
                    break
                    ;;
                    *) 
                        echo "${RED}Invalid response. Please enter a number selection${RESET}"
                    esac
                done
        fi
            
        if [[ "$zones_count" < 3 ]]; then
            if [[ "$dtype" == "base_1"* ]]; then
                PS3="${CYAN}Select which availablity zone to deploy in: ${RESET}"
            else
                PS3="${CYAN}Select which availablity zones to deploy across: ${RESET}"
            fi
            if [[ "$zones_count" == 1 ]]; then
                zones_options=(
                    "Zone 1"
                    "Zone 2"
                    "Zone 3"
                )
                select zones_selection in "${zones_options[@]}"
                do
                    case $REPLY in
                    1 )
                        echo "Private Service Edge resources will be deployed in AZ 1"
                        echo "export TF_VAR_zones='[\"1\"]'" >> .zspserc
                        break
                        ;;
                    2 )
                        echo "Private Service Edge resources will be deployed in AZ 2"
                        echo "export TF_VAR_zones='[\"2\"]'" >> .zspserc
                        break
                        ;;
                    3 )
                        echo "Private Service Edge resources will be deployed in AZ 3"
                        echo "export TF_VAR_zones='[\"3\"]'" >> .zspserc
                        break
                        ;;
                    *) 
                        echo "${RED}Invalid response. Please enter a number selection${RESET}"
                    esac
                done
            else
                zones_options=(
                        "Zones 1 and 2"
                    "Zones 1 and 3"
                    "Zones 2 and 3"
                )
                select zones_selection in "${zones_options[@]}"
                do
                    case $REPLY in
                    1 )
                        echo "Private Service Edge resources will be deployed in AZ 1 and AZ 2"
                        echo "export TF_VAR_zones='[\"1\", \"2\"]'" >> .zspserc
                        break
                        ;;
                    2 )
                        echo "Private Service Edge resources will be deployed in AZ 1 and AZ 3"
                        echo "export TF_VAR_zones='[\"1\", \"3\"]'" >> .zspserc
                        break
                        ;;
                    3 )
                        echo "Private Service Edge resources will be deployed in AZ 2 and AZ 3"
                        echo "export TF_VAR_zones='[\"2\", \"3\"]'" >> .zspserc
                        break
                        ;;
                        *) 
                        echo "${RED}Invalid response. Please enter a number selection${RESET}"
                    esac
                done
            fi
        else
            echo "Private Service Edge resources will be deployed in AZ1, AZ 2 and AZ 3"
            echo "export TF_VAR_zones='[\"1\", \"2\", \"3\"]'" >> .zspserc
        fi
    fi
fi


 #add local bin directory to PATH
if ! grep -Fxq "export PATH=\${PATH}:\${PWD}/bin" .zspserc; then
    echo 'export PATH=${PATH}:${PWD}/bin' >> .zspserc
fi

# add deployment type to .zspserc for future runs
if [[ "$oper" == "up" ]]; then
    echo "${GREEN}Updating .zspserc with dtype of $dtype${RESET}"
    sed -i'' -e '/dtype/d' .zspserc
    echo "export dtype=${dtype}" >> .zspserc
fi

# initialize environment variables
. ./.zspserc

# check for valid environment variables in .zspserc
if [ -z "$ARM_CLIENT_ID" ] || [ -z "$ARM_CLIENT_SECRET" ] || [ -z "$ARM_SUBSCRIPTION_ID" ] || [ -z "$ARM_TENANT_ID" ] || [ -z "$TF_VAR_arm_location" ]; then
    echo "${RED}Azure Access info is missing. Remove .zspserc file and rerun $0 $1${RESET}"
    exit 1
fi

echo "Download terraform binary for $ostype if not present..."
if [[ ! -e ./$dir/terraform ]]; then
    curl -o ./$dir/terraform_${tversion}_${arch}.zip https://releases.hashicorp.com/terraform/$tversion/terraform_${tversion}_${os_str}_${arch}.zip
    unzip ./$dir/terraform_${tversion}_${arch}.zip -d ./$dir
    rm -f ./$dir/terraform_${tversion}_${arch}.zip
fi

if [[ "$oper" == "do" ]]; then
    exit 1
fi

# Terraform apply/destroy
if [[ "$oper" == "up" ]]; then
    echo "${GREEN}Bringing up Private Service Edge cluster...${RESET}"
    TF_DATA_DIR=../.terraform ./$dir/terraform -chdir="$dtype" init
    if [[ "$AUTO_APPROVE" ]]; then
        TF_DATA_DIR=../.terraform ./$dir/terraform -chdir="$dtype" apply -auto-approve
    else
        TF_DATA_DIR=../.terraform ./$dir/terraform -chdir="$dtype" apply
    fi

elif [[ "$oper" == "destroy" ]]; then
    echo "${GREEN}Destroying Private Service Edge cluster...${RESET}"
    TF_DATA_DIR=../.terraform ./$dir/terraform -chdir="$dtype" init
    if [[ "$AUTO_APPROVE" ]]; then
        TF_DATA_DIR=../.terraform ./$dir/terraform -chdir="$dtype" destroy -auto-approve
    else
      TF_DATA_DIR=../.terraform ./$dir/terraform -chdir="$dtype" destroy
    fi
    echo "${GREEN}Removing Terraform files and directories...${RESET}"
    rm -rf bin 
    rm -rf **/.terraform/* && rm -rf **/.terraform*
    find . -type f -name '.terraform.lock.hcl' -delete
    rm -rf .terraform* && rm -f terraform.tfstate*
    rm -f *.pem && rm -f *.pem.pub
    rm -f name_prefix random_string
    rm -rf user.key user.crt
    rm -rf systems.json setup-*.tar
    rm -rf **/errorlog.txt
    now=$(date +'%Y-%m-%d-%H_%M_%S')
    echo "${GREEN}archiving .zspserc file to .zspserc-${now}${RESET}"
    cp .zspserc .zspserc-${now}
    rm -rf .zspserc && rm -rf .zspserc.bak
fi
